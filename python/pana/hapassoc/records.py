import sys
import os
from pana.template import PanaBase
from pana.mylib import is_number

IDX_0_LOCUS     = 0
IDX_0_HAPLOTYPE = 1
IDX_0_F_A       = 2
IDX_0_F_U       = 3
IDX_0_CHISQ     = 4
IDX_0_DF        = 5
IDX_0_P         = 6
IDX_0_SNPS      = 7

class HapAssocResRec(PanaBase):
    """ to automatically parse the haplotype association result generated by PLINK """

    def __init__(self, raw_list):
        self.__raw_list = raw_list

    def get_raw_repr(self):
        return {"Window name": self.locus,
                "Haplotype identifier": self.haplotype,
                "Frequency in cases": self.f_a,
                "Frequency in controls": self.f_u,
                "Test for association": self.chisq,
                "Degree of freedom": self.df,
                "Asymtotic p-value": self.p_value,
                "Estimated odds ratio": self.or_value,
                "SNPs forming the haplotype": self.snps,
                }

    @property
    def locus(self):
        return self.__raw_list[IDX_0_LOCUS]

    @property
    def haplotype(self):
        return self.__raw_list[IDX_0_HAPLOTYPE]

    @property
    def f_a(self):
        f_a = self.__raw_list[IDX_0_F_A]
        if is_number(f_a):
            return float(f_a)
        else:
            return f_a

    @property
    def f_u(self):
        f_u = self.__raw_list[IDX_0_F_U]
        if is_number(f_u):
            return float(f_u)
        else:
            return f_u

    @property
    def chisq(self):
        chisq = self.__raw_list[IDX_0_CHISQ]
        if is_number(chisq):
            return float(chisq)
        else:
            return chisq

    @property
    def df(self):
        return int(self.__raw_list[IDX_0_DF])

    @property
    def p_value(self):
        p_value = self.__raw_list[IDX_0_P]
        if is_number(p_value):
            return float(p_value)
        else:
            return p_value

    @property
    def or_value(self):
        f_a = self.f_a
        f_u = self.f_u
        if not is_number(f_a):
            return 'NA'
        else:
            return (f_a*(1-f_u)) / (f_u*(1-f_a))

    @property
    def snps(self):
        return self.__raw_list[IDX_0_SNPS]

    @property
    def valid_window(self):
        if not is_number(self.f_a):
            return False
        if not is_number(self.f_u):
            return False
        if not is_number(self.p_value):
            return False
        if not is_number(self.or_value):
            return False
        if self.f_a < self.f_u:
            return False
        if self.p_value > 0.05:
            return False
        if self.or_value < 1.5:
            return False
        return True
